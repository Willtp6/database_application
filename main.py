# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from unicodedata import digit
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import os
from fetch_database import FirebaseConnector
from openpyxl import Workbook
from datetime import datetime

basedir = os.path.dirname(__file__)

try:
    from ctypes import windll  # Only exists on Windows.
    myappid = 'mycompany.myproduct.subproduct.version'
    windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
except ImportError:
    pass

def show_inform_message(title:str, message:str):
    QMessageBox.information(None, title, message)

def show_alert_message(title:str, message:str):
    QMessageBox.warning(None, title, message)

def parse_time_from_string(time_str: str) -> datetime:
    date_format = "%Y-%m-%d %H:%M:%S.%f"
    return datetime.strptime(time_str, date_format)

def get_key_value(key: str, data: dict):
    if key in data: return data[key]
    else: return 'no data'

def int_list_to_string(int_list):
    if int_list == 'no data': return int_list
    return ','.join([str(num) for num in int_list])

class Ui_MainWindow(object):

    def __init__(self):
        self.cwd = os.getcwd()
        self.firebase_connector = FirebaseConnector()
        self.default_startTime = datetime(2023,1,1,0,0)
        self.default_endTime = None
        self.start_time = None
        self.end_time = None

    def check_checkbox_state(self) -> bool:
        return not (self.checkBox_lotteryGame.isChecked() 
                or self.checkBox_fishingGame.isChecked() 
                or self.checkBox_pokerGame.isChecked() 
                or self.checkBox_routePlanningGame.isChecked())

    def parse_game_data(self, data_list):
        current_difficulties = -1
        enter_count = [0] * 6
        plays_in_each_entry = 0
        modified_list = []
        for data in data_list:
            dic = data.to_dict()
            if 'game_record' in dic:
                dic = dic['game_record']
            if current_difficulties is not dic['gameDifficulties']:
                current_difficulties = dic['gameDifficulties']
                enter_count[current_difficulties] += 1
                plays_in_each_entry = 1
            else:
                plays_in_each_entry += 1
            dic['time'] = data.id
            dic['count'] = float(f'{enter_count[current_difficulties]}.' + f'{plays_in_each_entry}'.zfill(3))
            modified_list.append(dic)
        return modified_list

    def cal_accuracy_rate_between_trials(self, data_list):
        plays = [ [0] * 8] * 6
        all_correct_count = [ [0] * 8] * 6
        for data in data_list:
            level = data['gameDifficulties']
            digit = data['numOfDigits']
            plays[level][digit] += 1
            if data['accuracy'] >= 1:
                all_correct_count[level][digit] += 1
            data['accuracyRateBetweenTrials'] = all_correct_count[level][digit] / plays[level][digit]
        return data_list
    def filesave(self):
        
        user_id = self.lineEdit_userId.text()

        # * check if the user id text is not empty
        if(user_id == ''): 
            show_alert_message("條件不足", "使用者ID不可為空")
            return
        
        # * check if user has at least choose one game
        if(self.check_checkbox_state()):
            show_alert_message("條件不足", "至少需要選擇一款遊戲")
            return
        
        # * check if user exists
        if not self.firebase_connector.get_user_by_email(user_id):
            show_alert_message("獲取失敗",'未找到使用者')
            return
        
        name, filetype = QtWidgets.QFileDialog.getSaveFileName(self.centralwidget, 'Save File', self.cwd, '.xlsx')
        
        if(name == ''):
            show_alert_message("存取失敗", "檔案名稱不可為空")
        else:
            wb = Workbook()
            del wb['Sheet']
            
            #* get start and end time
            if self.lineEdit_startYear.text() != '':
                start_year = int(self.lineEdit_startYear.text())
            else:
                start_year = self.default_startTime.year
            if self.lineEdit_startMonth.text() != '':
                start_month = int(self.lineEdit_startMonth.text())
            else:
                start_month = self.default_startTime.month
            if self.lineEdit_startDay.text() != '':
                start_day = int(self.lineEdit_startDay.text())
            else:
                start_day = self.default_startTime.day
            if self.lineEdit_startYear.text() != '':
                start_hour = int(self.lineEdit_startHour.text())
            else:
                start_hour = self.default_startTime.hour
            if self.lineEdit_startMinute.text() != '':
                start_minute = int(self.lineEdit_startMinute.text())
            else:
                start_minute = self.default_startTime.minute
            
            self.default_endTime = datetime.now()

            if self.lineEdit_endYear.text() != '':
                end_year = int(self.lineEdit_endYear.text())
            else:
                end_year = self.default_endTime.year
            if self.lineEdit_endMonth.text() != '':
                end_month = int(self.lineEdit_endMonth.text())
            else:
                end_month = self.default_endTime.month
            if self.lineEdit_endDay.text() != '':
                end_day = int(self.lineEdit_endDay.text())
            else:
                end_day = self.default_endTime.day
            if self.lineEdit_endHour.text() != '':
                end_hour = int(self.lineEdit_endHour.text())
            else:
                end_hour = self.default_endTime.hour
            if self.lineEdit_endMinute.text() != '':
                end_minute = int(self.lineEdit_endMinute.text())
            else:
                end_minute = self.default_endTime.minute
            try:
                start_time = datetime(start_year, start_month, start_day, start_hour, start_minute)
                print(start_time)
                end_time = datetime(end_year, end_month, end_day, end_hour, end_minute)
                print(end_time)
            except:
                show_alert_message("時間填寫錯誤", "請注意是否輸入合法之時間格式")
                return

            

            if self.checkBox_lotteryGame.isChecked():
                lottery_game_data = self.firebase_connector.get_game_info("lottery_game")
                if lottery_game_data is None:
                    show_inform_message("獲取失敗", "lottery game 資料不存在")
                else:
                    ws = wb.create_sheet('lottery_game')
                    ws.append(['time','level','numbers length', 'Trial numbers', 'accuracy rate within trial', 'accuracy rate between trials', 'RT', 'playerInput', 'answer',])
                    parsed_data = self.parse_game_data(lottery_game_data)
                    parsed_data = self.cal_accuracy_rate_between_trials(parsed_data)
                    for data in parsed_data:
                        # print(data.keys())
                        parsed_time = parse_time_from_string(data['time'])
                        if parsed_time < start_time or parsed_time > end_time: continue
                        ws.append([
                            get_key_value('time', data), get_key_value('gameDifficulties', data), get_key_value('numOfDigits', data),  
                            get_key_value('count', data), get_key_value('accuracy', data),  get_key_value('accuracyRateBetweenTrials', data), 
                            get_key_value('responseTime(Milliseconds)', data), int_list_to_string(get_key_value('playerInput', data)), 
                            int_list_to_string(get_key_value('answer', data))
                        ])

            if self.checkBox_fishingGame.isChecked():
                fishing_game_data = self.firebase_connector.get_game_info("fishing_game")
                if fishing_game_data is None:
                    show_inform_message("獲取失敗", "fishing game 資料不存在")
                else:
                    ws = wb.create_sheet('fishing_game')
                    ws.append(['time', 'level', 'Trial numbers', 'type', 'RT'])
                    parsed_data = self.parse_game_data(fishing_game_data)
                    for data in parsed_data:
                        # print(data)
                        if parsed_time < start_time or parsed_time > end_time: continue
                        ws.append([
                            get_key_value('time', data), get_key_value('gameDifficulties', data), get_key_value('count', data),
                            get_key_value('type', data), get_key_value('responseTime(Milliseconds)', data)
                        ])

            if self.checkBox_pokerGame.isChecked():
                poker_game_data = self.firebase_connector.get_game_info("poker_game")
                if poker_game_data is None:
                    show_inform_message("獲取失敗", "poker game 資料不存在")
                else:
                    ws = wb.create_sheet('poker_game')
                    ws.append(['time', 'level', 'Trial numbers', 'player card', 'computer card', 'result', 'RT'])
                    parsed_data = self.parse_game_data(poker_game_data)
                    for data in parsed_data:
                        # print(data)
                        if parsed_time < start_time or parsed_time > end_time: continue
                        ws.append([
                            get_key_value('time', data), get_key_value('gameDifficulties', data), get_key_value('count', data), 
                            get_key_value('playererCard', data), get_key_value('computerCard', data), 
                            get_key_value('result', data), get_key_value('responseTime(Milliseconds)', data)
                        ])

            if self.checkBox_routePlanningGame.isChecked():
                route_planning_game_data = self.firebase_connector.get_game_info("route_planning_game")
                if route_planning_game_data is None:
                    show_inform_message("獲取失敗", "route planning game 資料不存在")
                else:
                    ws = wb.create_sheet('route_planning_game')
                    ws.append(['time', 'level', 'Trial numbers', 'map id', 'number of targets', 'time to each target', 'nontarget error', 'repeated error', 'result', 'RT'])
                    parsed_data = self.parse_game_data(route_planning_game_data)
                    for data in parsed_data:
                        # print(data)
                        if parsed_time < start_time or parsed_time > end_time: continue
                        ws.append([
                            get_key_value('time', data), int(get_key_value('gameDifficulties', data)) +1, get_key_value('count', data), get_key_value('mapIndex', data), 
                            get_key_value('numOfTargets', data), int_list_to_string(get_key_value('timeToEachHalfwayPoint', data)), get_key_value('nonTargetError', data),
                            get_key_value('repeatedError', data), get_key_value('result', data), get_key_value('responseTime(Milliseconds)', data)
                        ])

            wb.save(name + filetype)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(520, 520)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit_userId = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_userId.setGeometry(QtCore.QRect(30, 80, 150, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_userId.setFont(font)
        self.lineEdit_userId.setObjectName("lineEdit_userId")
        self.pushButton_fetchData = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_fetchData.setGeometry(QtCore.QRect(190, 420, 140, 50))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_fetchData.setFont(font)
        self.pushButton_fetchData.setObjectName("pushButton_fetchData")
        self.pushButton_fetchData.clicked.connect(self.filesave)
        self.label_inputUserId = QtWidgets.QLabel(self.centralwidget)
        self.label_inputUserId.setGeometry(QtCore.QRect(30, 30, 170, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_inputUserId.setFont(font)
        self.label_inputUserId.setObjectName("label_inputUserId")
        self.checkBox_lotteryGame = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_lotteryGame.setGeometry(QtCore.QRect(260, 70, 100, 30))
        self.checkBox_lotteryGame.stateChanged.connect(lambda: print('changed'))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_lotteryGame.setFont(font)
        self.checkBox_lotteryGame.setObjectName("checkBox_lotteryGame")
        self.checkBox_pokerGame = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_pokerGame.setGeometry(QtCore.QRect(260, 110, 100, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_pokerGame.setFont(font)
        self.checkBox_pokerGame.setObjectName("checkBox_pokerGame")
        self.checkBox_fishingGame = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_fishingGame.setGeometry(QtCore.QRect(360, 70, 90, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_fishingGame.setFont(font)
        self.checkBox_fishingGame.setObjectName("checkBox_fishingGame")
        self.checkBox_routePlanningGame = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_routePlanningGame.setGeometry(QtCore.QRect(360, 110, 130, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_routePlanningGame.setFont(font)
        self.checkBox_routePlanningGame.setIconSize(QtCore.QSize(30, 30))
        self.checkBox_routePlanningGame.setObjectName("checkBox_routePlanningGame")
        self.lineEdit_startYear = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_startYear.setGeometry(QtCore.QRect(50, 230, 60, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_startYear.setFont(font)
        self.lineEdit_startYear.setObjectName("lineEdit_startYear")
        self.lineEdit_startMonth = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_startMonth.setGeometry(QtCore.QRect(130, 230, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_startMonth.setFont(font)
        self.lineEdit_startMonth.setObjectName("lineEdit_startMonth")
        self.lineEdit_startDay = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_startDay.setGeometry(QtCore.QRect(180, 230, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_startDay.setFont(font)
        self.lineEdit_startDay.setObjectName("lineEdit_startDay")
        self.label_colon = QtWidgets.QLabel(self.centralwidget)
        self.label_colon.setGeometry(QtCore.QRect(265, 230, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_colon.setFont(font)
        self.label_colon.setObjectName("label_colon")
        self.label_choosingGame = QtWidgets.QLabel(self.centralwidget)
        self.label_choosingGame.setGeometry(QtCore.QRect(240, 30, 130, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_choosingGame.setFont(font)
        self.label_choosingGame.setObjectName("label_choosingGame")
        self.lineEdit_startHour = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_startHour.setGeometry(QtCore.QRect(230, 230, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_startHour.setFont(font)
        self.lineEdit_startHour.setText("")
        self.lineEdit_startHour.setObjectName("lineEdit_startHour")
        self.label_choosingTimeInterval = QtWidgets.QLabel(self.centralwidget)
        self.label_choosingTimeInterval.setGeometry(QtCore.QRect(30, 140, 200, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.label_choosingTimeInterval.setFont(font)
        self.label_choosingTimeInterval.setObjectName("label_choosingTimeInterval")
        self.label_colon2 = QtWidgets.QLabel(self.centralwidget)
        self.label_colon2.setGeometry(QtCore.QRect(265, 310, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_colon2.setFont(font)
        self.label_colon2.setObjectName("label_colon2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 190, 100, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(40, 270, 100, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.lineEdit_startMinute = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_startMinute.setGeometry(QtCore.QRect(280, 230, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_startMinute.setFont(font)
        self.lineEdit_startMinute.setText("")
        self.lineEdit_startMinute.setObjectName("lineEdit_startMinute")
        self.lineEdit_endYear = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_endYear.setGeometry(QtCore.QRect(50, 310, 60, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_endYear.setFont(font)
        self.lineEdit_endYear.setObjectName("lineEdit_endYear")
        self.lineEdit_endMonth = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_endMonth.setGeometry(QtCore.QRect(130, 310, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_endMonth.setFont(font)
        self.lineEdit_endMonth.setObjectName("lineEdit_endMonth")
        self.lineEdit_endDay = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_endDay.setGeometry(QtCore.QRect(180, 310, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_endDay.setFont(font)
        self.lineEdit_endDay.setObjectName("lineEdit_endDay")
        self.lineEdit_endMinute = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_endMinute.setGeometry(QtCore.QRect(280, 310, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_endMinute.setFont(font)
        self.lineEdit_endMinute.setText("")
        self.lineEdit_endMinute.setObjectName("lineEdit_endMinute")
        self.lineEdit_endHour = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_endHour.setGeometry(QtCore.QRect(230, 310, 30, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_endHour.setFont(font)
        self.lineEdit_endHour.setText("")
        self.lineEdit_endHour.setObjectName("lineEdit_endHour")
        self.label_timeHint = QtWidgets.QLabel(self.centralwidget)
        self.label_timeHint.setGeometry(QtCore.QRect(325, 230, 180, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_timeHint.setFont(font)
        self.label_timeHint.setObjectName("label_timeHint")
        self.label_timeHint2 = QtWidgets.QLabel(self.centralwidget)
        self.label_timeHint2.setGeometry(QtCore.QRect(325, 310, 180, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_timeHint2.setFont(font)
        self.label_timeHint2.setObjectName("label_timeHint2")
        self.label_slash = QtWidgets.QLabel(self.centralwidget)
        self.label_slash.setGeometry(QtCore.QRect(115, 230, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash.setFont(font)
        self.label_slash.setObjectName("label_slash")
        self.label_slash_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_slash_2.setGeometry(QtCore.QRect(165, 230, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash_2.setFont(font)
        self.label_slash_2.setObjectName("label_slash_2")
        self.label_slash_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_slash_3.setGeometry(QtCore.QRect(215, 230, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash_3.setFont(font)
        self.label_slash_3.setObjectName("label_slash_3")
        self.label_slash_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_slash_4.setGeometry(QtCore.QRect(165, 310, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash_4.setFont(font)
        self.label_slash_4.setObjectName("label_slash_4")
        self.label_slash_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_slash_5.setGeometry(QtCore.QRect(115, 310, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash_5.setFont(font)
        self.label_slash_5.setObjectName("label_slash_5")
        self.label_slash_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_slash_6.setGeometry(QtCore.QRect(215, 310, 20, 30))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_slash_6.setFont(font)
        self.label_slash_6.setObjectName("label_slash_6")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 360, 390, 31))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 520, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_fetchData.setText(_translate("MainWindow", "獲取資料"))
        self.label_inputUserId.setText(_translate("MainWindow", "輸入玩家ID"))
        self.checkBox_lotteryGame.setText(_translate("MainWindow", "樂透"))
        self.checkBox_pokerGame.setText(_translate("MainWindow", "撲克"))
        self.checkBox_fishingGame.setText(_translate("MainWindow", "釣魚"))
        self.checkBox_routePlanningGame.setText(_translate("MainWindow", "路線規劃"))
        self.label_colon.setText(_translate("MainWindow", ":"))
        self.label_choosingGame.setText(_translate("MainWindow", "篩選遊戲"))
        self.label_choosingTimeInterval.setText(_translate("MainWindow", "篩選時間區間"))
        self.label_colon2.setText(_translate("MainWindow", ":"))
        self.label_6.setText(_translate("MainWindow", "開始時間"))
        self.label_7.setText(_translate("MainWindow", "結束時間"))
        self.label_timeHint.setText(_translate("MainWindow", "(年/月/日/時:分)"))
        self.label_timeHint2.setText(_translate("MainWindow", "(年/月/日/時:分)"))
        self.label_slash.setText(_translate("MainWindow", "/"))
        self.label_slash_2.setText(_translate("MainWindow", "/"))
        self.label_slash_3.setText(_translate("MainWindow", "/"))
        self.label_slash_4.setText(_translate("MainWindow", "/"))
        self.label_slash_5.setText(_translate("MainWindow", "/"))
        self.label_slash_6.setText(_translate("MainWindow", "/"))
        self.label.setText(_translate("MainWindow", "註 : 時間填寫若有空白將自動獲取符合有填寫的條件之資料"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
